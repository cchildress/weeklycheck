#!/usr/bin/env python3
# Gentoo dependencies:
# dev-python/psutil
# dev-python/pyopenssl
# sys-apps/lm_sensors

import configparser
from datetime import datetime
from datetime import timedelta
import os
import re
import shlex
from socket import gethostname
from socket import getfqdn
import subprocess
force_ssl_off = False
try:
	from OpenSSL import crypto
except ImportError:
	force_ssl_off = True
force_ps_off = False
try:
	import psutil
except ImportError:
	force_ps_off = True

smart_cmd = 'smartctl -H'		# Command to use to fetch SMART data (the /dev/x bit will be added for you).
sensors_cmd = 'sensors'			# Command to collect temperature data.
portage_cmd = 'emerge -puDN world'	# Command to build the update list (this is intended to work for portage based repos).
glsa_cmd = 'glsa-check -t all'	# Command to check for GLSA matches.
config_file = '/etc/weeklycheck/config'
config_file_ssl = '/etc/weeklycheck/ssl_certs'

version = '1.1.0'
debug = 0

# Fetch the uptime from /proc/uptime and format it nicely
def get_uptime():
	try:
		with open('/proc/uptime', 'r') as f:
			uptime_seconds = float(f.readline().split()[0])
			uptime_string = str(timedelta(seconds = uptime_seconds))[:-7]
	except IOError:
		uptime_string = 'Could not open /proc/uptime. Are you sure you\'re using a real computer?'
	return (uptime_string)

# This function handles rounding the disk sizes in get_all_disk_usage()
def round_disk_size(value_in, reference_size):
	value_in = str(value_in)
	value_out = ''
	reference_size = str(reference_size)
	# Size in B
	if len(reference_size) < 4:
		value_out = value_in + 'B'
	# Size in KB
	elif 4 <= len(reference_size) < 7:
		value_out = value_in[:-3] + 'KB'
	# Size in MB
	elif 7 <= len(reference_size) < 10:
		value_out = value_in[:-6] + 'MB'
	# Size in GB
	elif 10 <= len(reference_size) < 13:
		value_out = value_in[:-9] + 'GB'
	elif 13 <= len(reference_size) < 16:
		value_out = value_in[:-12] + 'TB'
	else:
		print ('We didn\'t handle that size well')
	return value_out

# My python version of df -h.
def check_all_disk_usage():
	partition_list = psutil.disk_partitions()
	partitions_data = []
	longest_partition_str = 0
	longest_mount_str = 0
	partition_sep = ''
	mount_sep = ''
	for partition in partition_list:
		usage_data = psutil.disk_usage(partition[1])
		used = round_disk_size(str(usage_data[1]), usage_data[0])
		total = round_disk_size(str(usage_data[0]), usage_data[0])
		partitions_data.append({"partition": partition[0], "mount": partition[1], "used": used, "total": total, "percent": str(usage_data[3])})
		if len(partition[0]) > longest_partition_str:
			longest_partition_str = len(partition[0])
		if len(partition[1]) > longest_mount_str:
			longest_mount_str = len(partition[1])
	longest_partition_str = longest_partition_str + 2
	longest_mount_str = longest_mount_str + 2
	print ('	Partition' + ' '*(longest_partition_str - 9) + 'Path' + ' '*(longest_mount_str - 4) + '	Used	Total	Percent')
	for i in partitions_data:
		print ('	' + i['partition'] + ' '*(longest_partition_str - len(i['partition'])) + i['mount'] + ' '*(longest_mount_str - len(i['mount'])) + '	' + i['used'] + '	' + i['total'] + '	' + i['percent'])
		

# General purpose function to execute shell commands
def run_shell_cmd(do_this):
	do_this = str(do_this)
	stdout = ''
	proc = subprocess.Popen(shlex.split(do_this), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
	stdout, stderr = proc.communicate()
	return str(stdout)

# Display SMART data for all disks
def check_smart_data():
	dev_list = os.listdir('/dev/')
	search_dev = re.compile('^sd[a-z]$')
	search_result = re.compile('[A-S]{6}')
	for dev in dev_list:
		result = search_dev.match(dev)
		if result:
			output = run_shell_cmd(smart_cmd + ' /dev/' + dev)
			if search_result.search(output):
				match = search_result.search(output)
				health = str(match.group(0))
				print ('	/dev/' + dev + ': ' + health)
			else:
				print ('	/dev/' + dev + ': skipping - not SMART enabled')

# Get temperatures from sensors
def check_temp_data():
	output = run_shell_cmd(sensors_cmd)
	output = output.split('\\n')
	for i in output:
		if 'temp' in i:
			print ('	' + re.sub('\\\\xc2\\\\xb0', '\u00b0', i))

# Check for portage updates
def check_portage_updates():
	output = run_shell_cmd(portage_cmd)
	output = output.split('\\n')
	for i in output:
		if '[ebuild' in i:
			print ('	' + i)

def check_glsa():
	output = run_shell_cmd(glsa_cmd)
	output = output.split('\\n')
	print('	' + output[0].replace('b\'', ''))
	for i in output[1:-1]:
		print ('	' + i)

# convert the 20161218201146Z format from the crypto object to something a bit more helpful.
def ASN1_to_datetime(info):
	year = int(info[0:4])
	month = int(info[4:6])
	day = int(info[6:8])
	hour = int(info[8:10])
	minute = int(info[10:12])
	second = int(info[12:14])

	dt = datetime(year, month, day, hour, minute, second, 0)

	return dt

# Check one given SSL certificate
def check_ssl_cert(cert_path):
	error = True
	valid = False
	expires = ''

	try:
		f = open(cert_path, 'r')
	except IOError:
		return (error, valid, expires)
	error = False

	cert_raw = f.read()
	cert_data = crypto.load_certificate(crypto.FILETYPE_PEM, cert_raw)

	if cert_data.has_expired():
		valid = False
	else:
		valid = True
		expires = ASN1_to_datetime(cert_data.get_notAfter())

	f.close()
	return (error, valid, expires)

# Check all certificates listed in the config file and format things nicely.
def check_all_ssl_certs():
	try:
		f = open(config_file_ssl,'r')
	except IOError:
		print ('	Could not open SSL cert list from ' + config_file_ssl + '. Unable to check SSL certificates.')
		return
	for line in f:
		if line[0] != '#':
			error, valid, expires = check_ssl_cert(line.rstrip())
			if error:
				print ('	error opening ' + line.rstrip() + '.')
			else:
				remaining = str(expires - datetime.now())
				if valid:
					print ('	' + line.rstrip() + ': expires ' + str(expires) + ' UTC (' + remaining + ' remaining)')
				else:
					print ('	' + line.rstrip() + ' has expired. You should look into that.')
	f.close()

def main():
	if debug:
		print ('+----------------------------------------------+')
		print ('|   Cam\'s weekly audit - ver ' + version + ' DEV BUILD   |')
		print ('|   (This totally isn\'t a ripoff of dwaudit)   |')
		print ('+----------------------------------------------+')
	else:
		print ('+------------------------------------+')
		print ('|   Cam\'s weekly audit - ver ' + version + '   |')
		print ('+------------------------------------+')
	try:
		config_parser = configparser.SafeConfigParser()
		config_parser.read(config_file)
		enable_sensors = config_parser.get('modules', 'enable_sensors')
		enable_smart = config_parser.get('modules', 'enable_smart')
		enable_ssl = config_parser.get('modules', 'enable_ssl')
	except (configparser.NoSectionError, IOError):
		print('***Could not open config file ' + config_file + '. Assuming defaults.***')
		enable_sensors = False
		enable_smart = False
		enable_ssl = False
	print ('Hostname: {0} ({1})'.format(gethostname(), getfqdn()))
	print ('Uptime: {0}'.format(get_uptime()))
	print ('Generated on {0} at {1} (local time)'.format(datetime.now().strftime('%Y-%m-%d'), datetime.now().strftime('%H:%M:%S')))
	print ('')
	if not force_ps_off:
		print ('CPU usage: {0}%'.format(psutil.cpu_percent(interval=0.5)))
		print ('Memory consumption: {0}/{1} ({2}%)'.format(str(psutil.virtual_memory()[3])[:-6],str(psutil.virtual_memory()[0])[:-6],psutil.virtual_memory()[2]))
		print ('Disk Usage:')
		check_all_disk_usage()
	if enable_smart:
		print ('SMART status:')
		check_smart_data()
	if enable_sensors:
		print ('System temperatures:')
		check_temp_data()
	print ('Package updates:')
	check_portage_updates()
	print ('GLSA Check:')
	check_glsa()
	print ('Running kernel: {0}'.format(os.uname()[2]))
	if enable_ssl and not force_ssl_off:
		print ('SSL certificates:')
		check_all_ssl_certs()

if __name__ == '__main__':
	main()
